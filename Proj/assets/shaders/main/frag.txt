#version 410
uniform sampler2D u_Texture;
uniform vec3 u_camPos;

uniform vec3 u_lightPositions[5];
uniform int u_lightCount;
uniform vec3 u_lightColors[5];

uniform float u_dissolve;
uniform float u_specularHighlight;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_FragPos;

void main()
{
    //Light setup
    vec3 lightColor = vec3(1, 1, 1);
    vec3 light = vec3(0,0,0);
    vec3 diffuse = vec3(0,0,0);
    vec3 specular = vec3(0,0,0);

    vec3 norm = normalize(v_Normal);
    vec3 lightDir;
    vec3 viewDir = normalize(u_camPos - v_FragPos);

    //Handle multiple lights
    for(int i = 0; i < u_lightCount; i++)
    {
        lightDir = normalize(u_lightPositions[i] - v_FragPos);

        //diffuse lighting
        float diff = max(dot(norm, lightDir), 0.0);
        diffuse += diff * u_lightColors[i];

        //Phong reflect
        vec3 reflectDir = reflect(-lightDir, norm);

        //Calculate specular strength
        //Last parameter is shininess, specular highlight
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_specularHighlight);
        //Add colour
        specular += spec * u_lightColors[i];
    }
    

    //Ambient lighting setup
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    //Texture read
    vec4 tex = texture2D(u_Texture, v_TexCoord);
    
    //Apply lighting
    light = ambient;
    light += diffuse;
    light += specular;
    gl_FragColor = vec4(light, u_dissolve) * tex;
}