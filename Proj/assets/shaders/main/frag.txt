#version 410
uniform sampler2D u_Texture;
uniform vec3 u_camPos;

uniform int u_lightCount;
uniform float u_lightIntensities[10];
uniform vec3 u_lightPositions[10];
uniform vec3 u_lightColors[10];

uniform float u_dissolve;
uniform float u_specularHighlight;
uniform vec3 u_emissiveColour;
uniform float u_ambientBrightness;

varying vec2 v_TexCoord;
varying vec3 v_Normal;
varying vec3 v_FragPos;

void main()
{
    //Light setup
    vec3 ambientColor = vec3(1, 1, 1);
    vec3 light = vec3(0,0,0);
    vec3 diffuse = vec3(0,0,0);
    vec3 specular = vec3(0,0,0);

    vec3 norm = normalize(v_Normal);
    vec3 lightDir;
    vec3 viewDir = normalize(u_camPos - v_FragPos);

    if(length(u_emissiveColour) != 0)
    {
        light += u_emissiveColour;

    }

    //Handle multiple lights
    for(int i = 0; i < u_lightCount; i++)
    {
        float intensity = 0;

        if(u_lightIntensities[i] >= 0)
        {
            //Calculate intensity using inverse square law
            //Potentially able to optimise our variable usage here
            float lightDist = distance(u_lightPositions[i], v_FragPos);
            intensity = u_lightIntensities[i] / (lightDist * lightDist);
        }
        else //Flat directional light
        {
            intensity = abs(u_lightIntensities[i]);
        }
        

        lightDir = normalize(u_lightPositions[i] - v_FragPos);

        //diffuse lighting
        float diff = max(dot(norm, lightDir), 0.0);
        diffuse += diff * intensity * u_lightColors[i];

        //Phong reflect
        vec3 reflectDir = reflect(-lightDir, norm);

        //Calculate specular strength
        //Last parameter is shininess, specular highlight
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), u_specularHighlight);
        //Add colour
        specular += spec * intensity * u_lightColors[i];
    }
    

    //Ambient lighting setup
    vec3 ambient = u_ambientBrightness * ambientColor;

    //Texture read
    vec4 tex = texture2D(u_Texture, v_TexCoord);
    
    //Apply lighting
    light += ambient;
    light += diffuse;
    light += specular;
    gl_FragColor = vec4(light, u_dissolve) * tex;
}